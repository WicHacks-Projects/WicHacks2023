import numpy as np
import cv2
import mediapipe as mp

# Define parameters for the hand tracker and gesture recognition
cap = cv2.VideoCapture(0)
mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(
    max_num_hands=1,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5
)

# Define parameters for the canvas
num_fingers = 5
num_joints_per_finger = 4  # Pointer finger has 3 joints
max_joint_angle = np.pi / 4  # Maximum angle for each joint in radians


canvas_width = 640
canvas_height = 480
canvas = np.zeros((canvas_height, canvas_width, 3), dtype=np.uint8)

# Define function to generate random hand movements
def generate_pointer_movement():
    # Generate random joint angles for the pointer finger
    joint_angles = np.zeros((num_fingers, num_joints_per_finger))

    # Generate random joint angles for the pointer finger
    pointer_joint_angles = np.random.uniform(-max_joint_angle, max_joint_angle, size=num_joints_per_finger)
    joint_angles[1] = pointer_joint_angles

    # Flatten the joint angles into a 20-element array
    hand_movement = joint_angles.flatten()

    return hand_movement

# Main loop for generating hand movements and drawing on the canvas
while True:
    # Get the hand landmarks from the camera
    ret, frame = cap.read()
    frame = cv2.flip(frame, 1)
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(image)

    # Get the landmarks and draw them on the canvas
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(canvas, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    # Generate a new hand movement and draw it on the canvas
    hand_movement = generate_pointer_movement()
    # Code to use the hand movement to draw on the canvas goes here

    # Display the canvas
    cv2.imshow("Hand Movement Art Generator", canvas)

    # Check for user input
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
